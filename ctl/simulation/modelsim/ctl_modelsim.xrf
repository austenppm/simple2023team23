vendor_name = ModelSim
source_file = 1, /export/home/021/a0211195/simple/2023-simple-2023-team23/ctl/ctl.v
source_file = 1, /export/home/021/a0211195/simple/2023-simple-2023-team23/ctl/db/ctl.cbx.xml
design_name = ctl
instance = comp, \MemRead~output , MemRead~output, ctl, 1
instance = comp, \MemWrite~output , MemWrite~output, ctl, 1
instance = comp, \RegWrite~output , RegWrite~output, ctl, 1
instance = comp, \ALUSrc1~output , ALUSrc1~output, ctl, 1
instance = comp, \ALUSrc2~output , ALUSrc2~output, ctl, 1
instance = comp, \MemtoReg~output , MemtoReg~output, ctl, 1
instance = comp, \Output~output , Output~output, ctl, 1
instance = comp, \Input~output , Input~output, ctl, 1
instance = comp, \ALUorShifter~output , ALUorShifter~output, ctl, 1
instance = comp, \Halt~output , Halt~output, ctl, 1
instance = comp, \opcode[0]~output , opcode[0]~output, ctl, 1
instance = comp, \opcode[1]~output , opcode[1]~output, ctl, 1
instance = comp, \opcode[2]~output , opcode[2]~output, ctl, 1
instance = comp, \opcode[3]~output , opcode[3]~output, ctl, 1
instance = comp, \RegDst[0]~output , RegDst[0]~output, ctl, 1
instance = comp, \RegDst[1]~output , RegDst[1]~output, ctl, 1
instance = comp, \RegDst[2]~output , RegDst[2]~output, ctl, 1
instance = comp, \Branch[0]~output , Branch[0]~output, ctl, 1
instance = comp, \Branch[1]~output , Branch[1]~output, ctl, 1
instance = comp, \Branch[2]~output , Branch[2]~output, ctl, 1
instance = comp, \clk~input , clk~input, ctl, 1
instance = comp, \clk~inputclkctrl , clk~inputclkctrl, ctl, 1
instance = comp, \inst[15]~input , inst[15]~input, ctl, 1
instance = comp, \twobit[1]~feeder , twobit[1]~feeder, ctl, 1
instance = comp, \rst_n~input , rst_n~input, ctl, 1
instance = comp, \twobit[1] , twobit[1], ctl, 1
instance = comp, \inst[14]~input , inst[14]~input, ctl, 1
instance = comp, \twobit[0] , twobit[0], ctl, 1
instance = comp, \Equal8~0 , Equal8~0, ctl, 1
instance = comp, \MemRead~reg0 , MemRead~reg0, ctl, 1
instance = comp, \Equal7~0 , Equal7~0, ctl, 1
instance = comp, \MemWrite~reg0 , MemWrite~reg0, ctl, 1
instance = comp, \inst[6]~input , inst[6]~input, ctl, 1
instance = comp, \opcode_reg[2]~feeder , opcode_reg[2]~feeder, ctl, 1
instance = comp, \opcode_reg[2] , opcode_reg[2], ctl, 1
instance = comp, \inst[12]~input , inst[12]~input, ctl, 1
instance = comp, \brch_reg[1] , brch_reg[1], ctl, 1
instance = comp, \inst[11]~input , inst[11]~input, ctl, 1
instance = comp, \brch_reg[0] , brch_reg[0], ctl, 1
instance = comp, \inst[13]~input , inst[13]~input, ctl, 1
instance = comp, \brch_reg[2] , brch_reg[2], ctl, 1
instance = comp, \always0~0 , always0~0, ctl, 1
instance = comp, \always0~1 , always0~1, ctl, 1
instance = comp, \opcode~3 , opcode~3, ctl, 1
instance = comp, \opcode[2]~reg0 , opcode[2]~reg0, ctl, 1
instance = comp, \inst[5]~input , inst[5]~input, ctl, 1
instance = comp, \opcode_reg[1]~feeder , opcode_reg[1]~feeder, ctl, 1
instance = comp, \opcode_reg[1] , opcode_reg[1], ctl, 1
instance = comp, \opcode~2 , opcode~2, ctl, 1
instance = comp, \opcode[1]~reg0 , opcode[1]~reg0, ctl, 1
instance = comp, \inst[7]~input , inst[7]~input, ctl, 1
instance = comp, \opcode_reg[3]~feeder , opcode_reg[3]~feeder, ctl, 1
instance = comp, \opcode_reg[3] , opcode_reg[3], ctl, 1
instance = comp, \opcode~0 , opcode~0, ctl, 1
instance = comp, \opcode[3]~reg0feeder , opcode[3]~reg0feeder, ctl, 1
instance = comp, \opcode[3]~reg0 , opcode[3]~reg0, ctl, 1
instance = comp, \inst[4]~input , inst[4]~input, ctl, 1
instance = comp, \opcode_reg[0] , opcode_reg[0], ctl, 1
instance = comp, \opcode~1 , opcode~1, ctl, 1
instance = comp, \opcode[0]~reg0 , opcode[0]~reg0, ctl, 1
instance = comp, \always0~2 , always0~2, ctl, 1
instance = comp, \always0~3 , always0~3, ctl, 1
instance = comp, \RegWrite~reg0 , RegWrite~reg0, ctl, 1
instance = comp, \always0~4 , always0~4, ctl, 1
instance = comp, \ALUSrc1~reg0 , ALUSrc1~reg0, ctl, 1
instance = comp, \always0~5 , always0~5, ctl, 1
instance = comp, \always0~6 , always0~6, ctl, 1
instance = comp, \ALUSrc2~reg0 , ALUSrc2~reg0, ctl, 1
instance = comp, \Equal10~0 , Equal10~0, ctl, 1
instance = comp, \always0~7 , always0~7, ctl, 1
instance = comp, \MemtoReg~reg0 , MemtoReg~reg0, ctl, 1
instance = comp, \Equal10~1 , Equal10~1, ctl, 1
instance = comp, \Output~reg0 , Output~reg0, ctl, 1
instance = comp, \Input~reg0 , Input~reg0, ctl, 1
instance = comp, \always0~8 , always0~8, ctl, 1
instance = comp, \ALUorShifter~reg0 , ALUorShifter~reg0, ctl, 1
instance = comp, \Equal10~2 , Equal10~2, ctl, 1
instance = comp, \Halt~reg0 , Halt~reg0, ctl, 1
instance = comp, \inst[8]~input , inst[8]~input, ctl, 1
instance = comp, \RegDst~0 , RegDst~0, ctl, 1
instance = comp, \RegDst[0]~reg0 , RegDst[0]~reg0, ctl, 1
instance = comp, \inst[9]~input , inst[9]~input, ctl, 1
instance = comp, \RegDst~1 , RegDst~1, ctl, 1
instance = comp, \RegDst[1]~reg0 , RegDst[1]~reg0, ctl, 1
instance = comp, \inst[10]~input , inst[10]~input, ctl, 1
instance = comp, \RegDst~2 , RegDst~2, ctl, 1
instance = comp, \RegDst[2]~reg0 , RegDst[2]~reg0, ctl, 1
instance = comp, \Branch~0 , Branch~0, ctl, 1
instance = comp, \Branch~1 , Branch~1, ctl, 1
instance = comp, \Branch[0]~reg0 , Branch[0]~reg0, ctl, 1
instance = comp, \always0~9 , always0~9, ctl, 1
instance = comp, \Branch~2 , Branch~2, ctl, 1
instance = comp, \Branch~3 , Branch~3, ctl, 1
instance = comp, \Branch[1]~reg0 , Branch[1]~reg0, ctl, 1
instance = comp, \Branch~4 , Branch~4, ctl, 1
instance = comp, \Branch[2]~reg0 , Branch[2]~reg0, ctl, 1
instance = comp, \inst[0]~input , inst[0]~input, ctl, 1
instance = comp, \inst[1]~input , inst[1]~input, ctl, 1
instance = comp, \inst[2]~input , inst[2]~input, ctl, 1
instance = comp, \inst[3]~input , inst[3]~input, ctl, 1
design_name = hard_block
instance = comp, \~ALTERA_ASDO_DATA1~~ibuf , ~ALTERA_ASDO_DATA1~~ibuf, hard_block, 1
instance = comp, \~ALTERA_FLASH_nCE_nCSO~~ibuf , ~ALTERA_FLASH_nCE_nCSO~~ibuf, hard_block, 1
instance = comp, \~ALTERA_DATA0~~ibuf , ~ALTERA_DATA0~~ibuf, hard_block, 1
